"Start Symbol" = <start>
"Case Sensitive" = True

booleanDeclarate = 'true' | 'false'
number = {Number}+('.'{Number}+)?
{Symbol} = {&20 .. &21} + {&23 .. &26} + {&28 .. &7E} 
stringDeclarate = '"'{Symbol}*'"' 
character = ['']{Symbol}[''] 
identifier = {Letter}({Letter}| {Number} | ['_'])*

           
Comment Start = '/*'
Comment End   = '*/'
Comment Line  = '//'

<start>::= <registers> <constants> <variables> <functions> <main> | <registers> <constants> <variables> <main> | <constants> <variables> <functions> <main> | <constants> <variables> <main>
        
<registers>::= <register> | <register> <registers>
<functions>::= <function> | <function> <functions>

<constants>::= 'constants' '{' <constants declarations> '}' | 'constants' '{' '}'
<constants declarations>::= <assignment declaration> | <assignment declaration> <constants declarations>
<assignment declaration>::= <primitive type> identifier '=' <value> ';'

<value>::= stringDeclarate | character | <logic expression>
<type>::= <primitive type> | identifier
<primitive type>::= 'integer' | 'float' | 'boolean' | 'string'

<variables>::= 'variables' '{' <expression variables> '}' | 'variables' '{' '}'
<declaration>::= <type> identifier ';'

<vector position>::= identifier <vector index>
<vector index>::= '[' number ']' | '[' number ']' <vector index> | '[' identifier ']' | '[' identifier ']' <vector index> | '[' <arithmetic expression>']' | '[' <arithmetic expression>']' <vector index>

<expression declaration>::= <primitive type> identifier ';' | identifier identifier ';' | <primitive type> identifier '=' <value> ';' | <primitive type> <vector position> ';'
<expression variables>::= <expression declaration> <expression variables> | <expression declaration>
                       
      
<register>::= 'register' identifier '{' <register body> '}'
<register body>::= <declaration> | <declaration> <register body>
<register position>::= identifier <register access>
<register access>::= '.' identifier | '.' identifier <register access> | '.' <vector position>

<function>::= 'function' <type> identifier <parameters> '{' <statements> '}' 
<parameters>::= '(' <parameter> ')' | '(' ')'
<parameter>::= <type> identifier | <type> identifier ',' <parameter> 

<main>::= 'main' '(' ')' '{' <statements> '}'
<statements> ::= <variables> <body>

<body>::= <commands> | <assignment> | <commands> <body>| <assignment> <body>
<assignment>::= <attribute> '=' <value> ';'| <attribute> <increment terminal> ';'
<attribute>::= identifier | <register position> | <vector position>

<commands>::= <for> | <while> | <if> | <write> | <read> | <return> | <function call> ';'
           
          
! Comandos:
<function call>::= identifier <argument>
<argument>::= '(' <arguments> ')' | '(' ')'
<arguments>::= <value> | <value> ',' <arguments>
<return>::= 'return' ';' | 'return' <value> ';'

<if>::= <fixed if>  | <fixed if> 'else' '{' <body> '}'
<fixed if>::= 'if' '(' <logic expression> ')' 'then' '{' <body> '}' 

<for>::= 'for' '(' <initialization> ';' <relational expression> ';' identifier <increment terminal> ')' '{' <body> '}'
<initialization>::= 'integer' identifier '=' <arithmetic expression> | identifier '=' <arithmetic expression> 

<while>::= 'while' '(' <logic expression> ')' '{' <body> '}'

<write>::= 'write' '(' <write list> ')' ';'
<write list> ::= <value> ',' <write list> | <value>

<read>::= 'read' '(' <read list> ')' ';'
<read list>::= <attribute>  ',' <read list> | <attribute>

! ExpressÃµes:
<increment terminal>::= '++' | '--'

<logic expression>::= <logic value> <logic terminal> <logic expression> | '(' <logic expression> ')' | '(' <logic expression> ')' <logic terminal> <logic expression> | <logic value>
<logic value>::= booleanDeclarate | <relational expression>
<logic terminal>::= '&&' | '||'   !retiramos o "=="

<relational expression>::= <arithmetic expression> <relational terminal> <relational expression> | '(' <relational expression> ')' |  '('<relational expression>')' <relational terminal> <relational expression> | <arithmetic expression>
<relational terminal>::= '>' | '<' | '!=' | '>=' | '<=' | '=='

<arithmetic expression>::= <arithmetic operating> <arithmetic sum> | <arithmetic operating>
<arithmetic sum>::= '+' <arithmetic operating> <arithmetic sum> | '-' <arithmetic operating> <arithmetic sum> | '+' <arithmetic operating> | '-' <arithmetic operating>

<arithmetic operating>::= <arithmetic value> <arithmetic multiplication> | <arithmetic value>
<arithmetic multiplication>::= '*' <arithmetic value> <arithmetic multiplication> | '/' <arithmetic value> <arithmetic multiplication> | '*' <arithmetic value> | '/' <arithmetic value>

<arithmetic value>::= number | <function call> | <attribute> | '(' <arithmetic expression> ')' 
                   
