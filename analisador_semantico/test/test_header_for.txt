register r {
  integer a; 
  integer b;
}

constants {
  integer c = 1;
}

variables {
  string z = "teste string";
  integer g = 32;
  integer v_g[2];
  integer m_g[1][2];
  boolean controle = true;
  integer teste4;
}

function integer sum2(integer d, integer b){
  variables {

  }

  return c + b;
}


function string sum1(integer a, integer b) {
  variables {
    integer teste1;
    integer teste2;
    integer teste3;
  }

    // ---- Teste cabeçalho FOR em função ----
    
    // -- casos que não devem dar erros --
    // definição da variável (i) de controle no for 
    for (integer i = 12; i > 0; i++) {
        teste1 = 3;
        i = teste1;
    }

    // utilização de uma variável já existente (teste1) e atribuição de valor a mesma 
    for (teste1 = 23; teste1 < 0; g--) {
        teste1 = 3;
    }

    // definição da variável (i) de controle no for e atribuição de posição de matriz como valor
    for (integer i = m_g[0][1]; i >= teste1; i++) { 
        i = 3;
    }

    // utilização de uma variável já existente (teste1) e atribuição de posição de vetor como valor
    for (teste1 = m_g[0]; teste1 <= 0; teste1++) { 
        teste2 = 3;
    }

    // utilização de uma variável já existente (teste1) e atribuição de operação aritmética 
    for (teste2 = 12+15-85*g; teste1 != c; teste1++) {
        teste1 = 3;
    }

    // definição da variável (i) e atribuição de operação aritmética
    for (integer i = 12+15-85*g; teste1 == 32+8; teste1++) { 
        teste1 = 3;
        i = c;
    }

    // utilização de uma variável já existente (teste3) sem ser inicializada e atribuindo um valor a mesma 
    for (teste3 = 12+15-85*g; teste3 >= c; teste3++) {
        teste3 = 3;
    }

    // incremento de outra variável do tipo inteiro que não a de controle (deve ser permitido)
    for (teste4 = 14-teste3*78/12; teste1 <= 145-teste3; teste3--) {
        teste1 = 3;
    }
    
    for (integer i = 0; i != 0; i++) {
        teste1 = 3;
    }

    for (integer teste1 = 3; teste1 == 0; teste1--) {
        teste1 = 3;
    }

    for (teste1 = 3; teste1; ff--) {    /* esse caso não tem erro porque teste1 é um número que pode ser convertido para booleano. a parte condicional aceita apenas um booleano */
        teste1 = 3;
    }

    for (teste1 = 3-5+39*teste1; 3; c--) {    /* esse caso tem erro - não pode haver apenas um numero/identificar/boolean, tem que ser uma operação relacional */
        teste1 = 3;

    }
    /* testar operações mais complexas como condicao (segunda parte do for) */

    for (teste1 = 3; teste1 < 0; teste1--) {    /* nesse caso, só será aceito uma expressão (< > <= >= != ==) acho que tambem deve aceitar && e ||*/
        teste1 = 3;
    }

    for (teste1 = 3; teste1 + teste2; teste1--) {    /* nesse caso, só será aceito uma expressão seja relacional ou logica (< > <= >= != == && ||) */
        teste1 = 3;
    }

    for (teste1 = 3; (true && true); teste1--) {    /* nesse caso, não ocorre no sintático passando para o semantico - deve ser aceito no semantico porque é uma operação logica */
        teste1 = 3;
    }

    for (teste1 = 3; (teste1 && 3) >= (teste1 || 4); teste1--) {    
        teste1 = 3;
    }
  return "a + b";
}

main() {
  variables {
    string teste = "aaa";
    integer a = 5;
    integer b = 1;
    integer v[2];
    integer m[1][2];
    integer result;
    integer n1;
    integer n2;
    r r1;
  }
    /* Erro: está considerando que aqui está dentro de uma função */
    v[0] = 1;  
    v[1] = 1;
    m[0][0] = 1;
    m[0][1] = 1;
    result = sum(a, b);
    result = sum(v[0], v[1]);
    result = sum(m[0][0], m[0][1]);
    result = sum(r1.a, r1.b);
    sum(1, 2);
    result = sum(c, g);
    result = sum(sum1(n1, n2), sum(a, b));
    n1.a = 0;

    n1 = v[1];

  /* a = (((42*(31-5)) + 3)-32); */
  /*a = (((42*(31-5)) + 3)-g[2]) <= 3; */
  for (a = 3; ((((42*(31-5)) + 3)-32)) <= 3; a++){
    b = v[0];
  }

  while ((a + 1 && b) || a != c){
    if (c && b) then {
      num++;
    } else {
      num--;
    }
  }

}